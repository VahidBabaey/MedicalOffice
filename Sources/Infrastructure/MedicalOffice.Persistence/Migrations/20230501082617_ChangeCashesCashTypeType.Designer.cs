// <auto-generated />
using System;
using MedicalOffice.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalOffice.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230501082617_ChangeCashesCashTypeType")]
    partial class ChangeCashesCashTypeType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalOffice.Domain.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("RoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FDOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FDOId");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferrerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferrerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceRoomId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            BankName = "صادرات",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("311649ef-fbc7-42d0-b13d-539e0597eebe"),
                            BankName = "ملت",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1abfa749-a9b0-413d-8fda-e3674fc942c0"),
                            BankName = "سپه",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.BasicInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("BasicInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88db756e-9e30-4edd-9609-ee25b1b878d4"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "جنسیت",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)1,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("72573c86-a310-4b4e-a84a-3b40a229b4e6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "وضعیت تأهل",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)2,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("2309d900-2c22-4ffa-aac4-da5d5e6add5e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "تحصیلات",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)3,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("29d8defe-0820-4b5a-a121-64b774f4f7e3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نحوه آشنایی",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)4,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("3e9ef198-0c13-4eef-bb13-2c2941fdd585"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نوع هزینه ها",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)5,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("c21013be-7d00-4eb7-b109-ce821b59f828"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نوع اجناس انبار",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)6,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("515fe4ea-56b6-4fb4-99c4-a81e60667ea1"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "واحد شمارش کالا",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)7,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("149da9cf-c47b-4c00-bc25-a77165d5e4a2"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نوع عملیات انبار",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)8,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("efe319af-f4cd-4178-a91d-ca7b44fb18c7"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نوع دارو",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)9,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("d35fdee2-4d42-4b70-8ad7-b1664f413bb6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نوع بن تخفیف",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)10,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("abd5bef6-87fe-4318-af98-5e9a748dd345"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "نوع پیگیری",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)11,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("c2a74304-eac9-45d4-859d-bf3ecbca2a28"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "کشور",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)12,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("fdf26b96-1e16-4678-9d75-1d045c96fb9b"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "شهر",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)13,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("ec1c76bc-2bc4-41ed-830f-751ff8447a86"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "استان",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)14,
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("2888b35b-377b-42b3-81eb-cd29e3c21d62"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoName = "علت استعلاجی",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = (short)15,
                            isActive = false
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.BasicInfoDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfoDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("basicInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("basicInfoId");

                    b.ToTable("BasicInfoDetail");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba3f149d-b021-48b6-8066-071979ff9e5d"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoDetailName = "تهران",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            basicInfoId = new Guid("ec1c76bc-2bc4-41ed-830f-751ff8447a86")
                        },
                        new
                        {
                            Id = new Guid("b67a41f9-a543-4d24-8b9d-ab5d1406ac67"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InfoDetailName = "اصفهان",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            basicInfoId = new Guid("ec1c76bc-2bc4-41ed-830f-751ff8447a86")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Cash", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Recieved")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("Cashes");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CashId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CashType")
                        .HasColumnType("int");

                    b.Property<long>("Cost")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CashId");

                    b.HasIndex("OfficeId");

                    b.ToTable("CashCarts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CashId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CashType")
                        .HasColumnType("int");

                    b.Property<long>("Cost")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CashId");

                    b.HasIndex("OfficeId");

                    b.ToTable("CashChecks");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashMoney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CashId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CashType")
                        .HasColumnType("int");

                    b.Property<long>("Cost")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CashId");

                    b.HasIndex("OfficeId");

                    b.ToTable("CashMoneies");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashPos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CashId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CashType")
                        .HasColumnType("int");

                    b.Property<long>("Cost")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CashId");

                    b.HasIndex("OfficeId");

                    b.ToTable("CashPoses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Diagnose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnoseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DiscountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("DiscountTypes");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Consumption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DrugConsumptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrugSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrugShapeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrugUsageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenericCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHybrid")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShow")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Number")
                        .HasColumnType("real");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DrugConsumptionId");

                    b.HasIndex("DrugSectionId");

                    b.HasIndex("DrugShapeId");

                    b.HasIndex("DrugUsageId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugAbuse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ConsumptionAmount")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SNOMEDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SNOMEDId");

                    b.ToTable("DrugAbuses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConsumptionDrug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DrugConsumptions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugIntraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Control")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PDrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SDrugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PDrugId");

                    b.HasIndex("SDrugId");

                    b.ToTable("DrugIntractions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ConsumedNumber")
                        .HasColumnType("real");

                    b.Property<int>("ConsumptionFrequency")
                        .HasColumnType("int");

                    b.Property<int>("ConsumptionWay")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Dose")
                        .HasColumnType("real");

                    b.Property<int>("DrugType")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("FDOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriptionHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FDOId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PatientId");

                    b.ToTable("DrugPrescriptions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionDrug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugSections");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugShape", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShapeDrug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugShapes");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsageDrug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugUsages");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Experiment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnswerType")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenericCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaxNormalRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasuringDivision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinNormalRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("ExperimentPres");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FDO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FDO");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormCommitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("FormCommitments");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormIllness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("FormIllnesses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormReferal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("FormReferals");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.GeneralExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnyPresentSign")
                        .HasColumnType("bit");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeginHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("GeneralExaminations");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ICD11", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ICD11");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAdditionalInsurance")
                        .HasColumnType("bit");

                    b.Property<long?>("InsuranceCode")
                        .HasColumnType("bigint");

                    b.Property<int>("InsurancePercent")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdditionalInsurance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Joinable")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowonDisket")
                        .HasColumnType("bit");

                    b.Property<int>("TariffType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Insurances");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c712538-964f-418e-820a-bfc6c25e838e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasAdditionalInsurance = false,
                            InsuranceCode = 1L,
                            InsurancePercent = 0,
                            IsAdditionalInsurance = false,
                            IsDeleted = false,
                            Joinable = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "تامین",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            ShowonDisket = false,
                            TariffType = 2
                        },
                        new
                        {
                            Id = new Guid("559f0eef-8855-4a3f-8f1e-2de038b8a28a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasAdditionalInsurance = false,
                            InsuranceCode = 2L,
                            InsurancePercent = 0,
                            IsAdditionalInsurance = false,
                            IsDeleted = false,
                            Joinable = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "سلامت",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            ShowonDisket = false,
                            TariffType = 2
                        },
                        new
                        {
                            Id = new Guid("3e8d9775-24ae-4b6c-a2ee-3672b9f55d91"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasAdditionalInsurance = false,
                            InsuranceCode = 3L,
                            InsurancePercent = 0,
                            IsAdditionalInsurance = false,
                            IsDeleted = false,
                            Joinable = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "تکمیلی",
                            OfficeId = new Guid("300649ef-fbc7-42d0-b13d-539e0597eebe"),
                            ShowonDisket = false,
                            TariffType = 1
                        },
                        new
                        {
                            Id = new Guid("0c3bd851-13b7-453b-9143-6ac5d96dd9cd"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasAdditionalInsurance = false,
                            InsuranceCode = 4L,
                            InsurancePercent = 0,
                            IsAdditionalInsurance = false,
                            IsDeleted = false,
                            Joinable = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "آزاد",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            ShowonDisket = false,
                            TariffType = 1
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Introducer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntroducerType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Introducers");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("KMultipliers");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplierDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KMultiplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("KValue")
                        .HasColumnType("real");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KMultiplierId");

                    b.ToTable("KMultiplierDetails");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeginHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RVU3Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RVU3Id");

                    b.ToTable("MedicalActions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IHIOPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IHIOUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReferrer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialist")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTechnicalAssistant")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Title")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalStaffs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("803224e8-efc5-4998-b602-08dae7043559"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "سپیده",
                            IHIOPassword = "",
                            IHIOUserName = "",
                            IsDeleted = false,
                            IsReferrer = false,
                            IsSpecialist = false,
                            IsTechnicalAssistant = false,
                            LastName = "هاشمی",
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalNumber = "1235",
                            NationalId = "0113048998",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            PhoneNumber = "+989126802366",
                            RoleId = new Guid("70508b44-eae8-4d40-9318-651ae5b38f40"),
                            SpecializationId = new Guid("3ba9ddbe-0d1e-47cc-807f-3ea8d9a04ef3"),
                            Title = 1,
                            UserId = new Guid("28b4f560-5a36-4816-8646-b94486bb7464")
                        },
                        new
                        {
                            Id = new Guid("703224e8-efc5-4998-b602-08dae7043559"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "حسین",
                            IHIOPassword = "123456",
                            IHIOUserName = "0639405290",
                            IsDeleted = false,
                            IsReferrer = false,
                            IsSpecialist = false,
                            IsTechnicalAssistant = false,
                            LastName = "پورحسین",
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalNumber = "0000086751",
                            NationalId = "0112857469",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            PhoneNumber = "+989122684568",
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c"),
                            SpecializationId = new Guid("3ba9ddbe-0d1e-47cc-807f-3ea8d9a04ef3"),
                            Title = 1,
                            UserId = new Guid("d53c3b49-47ed-4647-aef5-01397ea68cea")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EveningEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EveningStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAppointmentCount")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MorningEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MorningStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("OfficeId");

                    b.ToTable("MedicalStaffSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cde5859d-3a54-4fa0-93b1-42ca4a574fd7"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EveningEnd = "17:00",
                            EveningStart = "14:00",
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxAppointmentCount = 10,
                            MedicalStaffId = new Guid("803224e8-efc5-4998-b602-08dae7043559"),
                            MorningEnd = "12:00",
                            MorningStart = "07:00",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            WeekDay = 0
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffServiceSharePercent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ShareAmount")
                        .HasColumnType("real");

                    b.Property<float>("SharePercent")
                        .HasColumnType("real");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShiftId");

                    b.ToTable("MedicalStaffServiceSharePercents");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9c7537c-d124-4f03-9cfe-dbc28200b2b7"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = "20",
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ویژه",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0")
                        },
                        new
                        {
                            Id = new Guid("2de66e03-8dba-4966-9c39-bb73414aabb6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = "30",
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "عالی",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0")
                        },
                        new
                        {
                            Id = new Guid("f0485f53-f344-444b-a560-21355af573a6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = "40",
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "معمولی",
                            OfficeId = new Guid("300649ef-fbc7-42d0-b13d-539e0597eebe")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MemberShipService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MemberShipServices");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Order")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasicInfo",
                            Order = (byte)1,
                            PersianName = "اطلاعات پایه"
                        },
                        new
                        {
                            Id = new Guid("7884aff9-de2c-410b-bfe0-43f510d378e3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OfficeInfo",
                            Order = (byte)20,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "اطلاعات مطب"
                        },
                        new
                        {
                            Id = new Guid("2bcdcf7d-5830-431e-a343-ced19741d4a5"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfMedicalStaffs",
                            Order = (byte)21,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف کادر درمان"
                        },
                        new
                        {
                            Id = new Guid("c86bd8b9-f0d9-44db-9f45-5616218638ad"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MedicalStaffsSchedule",
                            Order = (byte)22,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "برنامه حضور کادر درمان"
                        },
                        new
                        {
                            Id = new Guid("cfe66d95-299a-441b-b6b7-32b1c3993aa5"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfSection",
                            Order = (byte)23,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف بخش"
                        },
                        new
                        {
                            Id = new Guid("4d742e89-e8bc-44d1-ba16-f8326856264c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfServices",
                            Order = (byte)24,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف خدمات"
                        },
                        new
                        {
                            Id = new Guid("2cf199d3-9361-4e7e-9cad-79f38c33a631"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfShifts",
                            Order = (byte)25,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف شیفت"
                        },
                        new
                        {
                            Id = new Guid("fb0ceffb-9b69-4811-8cf3-d159165fcb48"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfMembership",
                            Order = (byte)26,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف عضویت"
                        },
                        new
                        {
                            Id = new Guid("13bde77d-fe6f-4417-bd43-22ae27fed831"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfInsurance",
                            Order = (byte)27,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف بیمه ها"
                        },
                        new
                        {
                            Id = new Guid("5572e148-1703-47a3-ab9c-2ddd8b129d2e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfDrug",
                            Order = (byte)28,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف دارو"
                        },
                        new
                        {
                            Id = new Guid("c7f11f6b-7490-4127-be99-46212d645b5a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfDrugInteractions",
                            Order = (byte)29,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف تداخلات دارو"
                        },
                        new
                        {
                            Id = new Guid("36c67308-ccb3-4d0f-95b3-91593fa66463"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfExperiment",
                            Order = (byte)30,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف آزمایش"
                        },
                        new
                        {
                            Id = new Guid("ba6e3459-d759-421c-8975-5bca504f4db6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfThematicBase",
                            Order = (byte)31,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف اطلاعات پایه موضوعی"
                        },
                        new
                        {
                            Id = new Guid("5cefe46e-bfea-4ca7-9a1b-347cdd5a4ef1"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfRefferrers",
                            Order = (byte)32,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف معرفین"
                        },
                        new
                        {
                            Id = new Guid("cad65760-68fc-43be-804c-4d22d957c887"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfKCoefficient",
                            Order = (byte)33,
                            ParentId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e"),
                            PersianName = "تعریف ضریب K"
                        },
                        new
                        {
                            Id = new Guid("aaa52e09-ca9c-421a-972e-764ef9a22d4a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TodayPatient",
                            Order = (byte)2,
                            PersianName = "بیماران امروز"
                        },
                        new
                        {
                            Id = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "File",
                            Order = (byte)3,
                            PersianName = "پرونده"
                        },
                        new
                        {
                            Id = new Guid("38c73f55-cc7b-49dd-a301-8dc441f0353c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CreateFile",
                            Order = (byte)34,
                            ParentId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c"),
                            PersianName = "تشکیل پرونده "
                        },
                        new
                        {
                            Id = new Guid("38e6f085-be0e-446f-8ad8-ae2aa12fe332"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AdvanceSearchFile",
                            Order = (byte)35,
                            ParentId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c"),
                            PersianName = "جستو جوی پیشرفته"
                        },
                        new
                        {
                            Id = new Guid("8018f694-2387-4e67-8263-1a994d010617"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Reception",
                            Order = (byte)4,
                            PersianName = "پذیرش"
                        },
                        new
                        {
                            Id = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Appointment",
                            Order = (byte)5,
                            PersianName = "وقت دهی "
                        },
                        new
                        {
                            Id = new Guid("fbcb96d0-5c1d-4e64-bc91-2863b8e1b98f"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppointmentSetting",
                            Order = (byte)36,
                            ParentId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6"),
                            PersianName = "تنظیمات وقت دهی"
                        },
                        new
                        {
                            Id = new Guid("24fee1ff-cb20-498d-bc82-5a5770c1534e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Appointment",
                            Order = (byte)37,
                            ParentId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6"),
                            PersianName = "وقت دهی"
                        },
                        new
                        {
                            Id = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Visit",
                            Order = (byte)6,
                            PersianName = "ویزیت"
                        },
                        new
                        {
                            Id = new Guid("a4568ac3-3157-49b2-95db-ae969c82b263"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Visit",
                            Order = (byte)38,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "ویزیت"
                        },
                        new
                        {
                            Id = new Guid("9c711d69-5783-4586-a9a5-a7ce5a51de2a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PMH",
                            Order = (byte)39,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "PMH"
                        },
                        new
                        {
                            Id = new Guid("35b49377-58ec-4312-b51c-5211df74b379"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paraclinic",
                            Order = (byte)40,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "پاراکلینیک"
                        },
                        new
                        {
                            Id = new Guid("2ee4d34e-d3a6-4cdb-b28a-fe2cb2fbd8dc"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Graphs",
                            Order = (byte)41,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "نمودارها"
                        },
                        new
                        {
                            Id = new Guid("7e25e8ea-3591-4367-81a3-48389ebfe33c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Forms",
                            Order = (byte)42,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "فرم ها"
                        },
                        new
                        {
                            Id = new Guid("0d9065d4-d5bc-4705-8530-e703360b69e9"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "َAtFirstLook",
                            Order = (byte)43,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "در یک نگاه"
                        },
                        new
                        {
                            Id = new Guid("f0436c8d-0d2d-4b32-82a2-baac3a8f3d19"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "َElectronicPrescribing",
                            Order = (byte)44,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "نسخه نویسی الکترونیک"
                        },
                        new
                        {
                            Id = new Guid("03fc5e29-4d7f-4a45-a898-e8cac402e226"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LightPen",
                            Order = (byte)45,
                            ParentId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06"),
                            PersianName = "قلم نوری"
                        },
                        new
                        {
                            Id = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "reports",
                            Order = (byte)7,
                            PersianName = "گزارش ها"
                        },
                        new
                        {
                            Id = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Warehousing",
                            Order = (byte)8,
                            PersianName = "انبارداری"
                        },
                        new
                        {
                            Id = new Guid("8f3efe85-509c-4df7-9790-e8d0125c9344"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DefinitionOfWarehousing",
                            Order = (byte)46,
                            ParentId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            PersianName = "تعاریف انبار"
                        },
                        new
                        {
                            Id = new Guid("337151c9-5b77-411a-bd25-be18663a00a5"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EntranceRemittance",
                            Order = (byte)47,
                            ParentId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            PersianName = "حواله ورود"
                        },
                        new
                        {
                            Id = new Guid("3b876efe-46c6-45b6-bfe8-3969d939981e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExitRemittance",
                            Order = (byte)48,
                            ParentId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            PersianName = "حواله خروج"
                        },
                        new
                        {
                            Id = new Guid("707c985a-4fcf-4e75-bc61-33e160c326f6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CirculationOfGoods",
                            Order = (byte)49,
                            ParentId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            PersianName = "گردش کالا"
                        },
                        new
                        {
                            Id = new Guid("a8220a4f-087f-476f-a07a-33c1fb45b15d"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StockOfGoods",
                            Order = (byte)50,
                            ParentId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            PersianName = "موجودی کالا"
                        },
                        new
                        {
                            Id = new Guid("fb172545-8c71-4559-8b65-abdecbe7e644"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreReports",
                            Order = (byte)51,
                            ParentId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609"),
                            PersianName = "گزارشات انبار"
                        },
                        new
                        {
                            Id = new Guid("b809a0b1-15a4-492a-b3fe-929ff8470231"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SMS",
                            Order = (byte)9,
                            PersianName = "پیامک"
                        },
                        new
                        {
                            Id = new Guid("dca4d822-579d-4e31-b235-e7808faa804d"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SMSSharge",
                            Order = (byte)52,
                            ParentId = new Guid("b809a0b1-15a4-492a-b3fe-929ff8470231"),
                            PersianName = "شارژ پیامک"
                        },
                        new
                        {
                            Id = new Guid("58aa8309-ae51-4c1f-a427-d8a66d881f2a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Settings",
                            Order = (byte)53,
                            ParentId = new Guid("b809a0b1-15a4-492a-b3fe-929ff8470231"),
                            PersianName = "تنظیمات"
                        },
                        new
                        {
                            Id = new Guid("45ca676b-e6e4-4457-9254-6674ac59f44c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sents",
                            Order = (byte)54,
                            ParentId = new Guid("b809a0b1-15a4-492a-b3fe-929ff8470231"),
                            PersianName = "ارسال شده ها"
                        },
                        new
                        {
                            Id = new Guid("d81547e7-2050-43b5-a127-6cbefb0d3580"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Settings",
                            Order = (byte)10,
                            PersianName = "تنظیمات"
                        },
                        new
                        {
                            Id = new Guid("f7829a47-bcd2-4ede-b3ba-2624222437cd"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Support",
                            Order = (byte)11,
                            PersianName = "پشتیبانی"
                        },
                        new
                        {
                            Id = new Guid("ea13c4f0-89f9-4d0d-b1aa-a8f7222600db"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ticket",
                            Order = (byte)55,
                            ParentId = new Guid("f7829a47-bcd2-4ede-b3ba-2624222437cd"),
                            PersianName = "تیکت"
                        },
                        new
                        {
                            Id = new Guid("31535b28-a356-426a-b3ca-8605c13746f3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SupportContact",
                            Order = (byte)56,
                            ParentId = new Guid("f7829a47-bcd2-4ede-b3ba-2624222437cd"),
                            PersianName = "تماس با پشتیبانی"
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MenuPermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("ea53dd69-35c5-43f7-a0aa-be02f24bfa71"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("f1568f21-659f-42d4-9a65-306acf0501c1"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("520df499-cb60-45b7-9f48-a142694c9ff6"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("583b93b7-60b0-418b-9f70-e3d22032a08a"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("cd77a3e3-f0c1-427f-9dcb-e098f53167d4"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("086109f0-8508-472e-a644-12f40f32177f"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("1b419f29-ce34-4c4e-ad7c-2804d8a6e15a"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("00826518-1bb8-4052-b9e1-0e64a5a6f7be"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("362754cf-e06e-466d-9d90-473360ec4308"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("8384e4ab-3784-4a13-b11a-27e43be3a827"),
                            MenuId = new Guid("bd389ea9-3cd5-48d6-bf01-669f6a87711c")
                        },
                        new
                        {
                            PermissionId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("8266f349-234c-400a-9670-4676b75d019c"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("953ebbbe-a4f2-49b7-9273-8fceed61479e"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("a3f8ca65-004e-4c5f-a3da-0c13b5b3d033"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("a46bf033-b50d-4e11-8c5d-0e404ed97b9f"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("ac4c98c9-0295-4bea-b34b-19660f948852"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("e4f9046b-7b60-4187-8f7d-50aeb32d7071"),
                            MenuId = new Guid("8018f694-2387-4e67-8263-1a994d010617")
                        },
                        new
                        {
                            PermissionId = new Guid("0f8e8881-c090-4d01-9ba7-c2fdb42549b3"),
                            MenuId = new Guid("aaa52e09-ca9c-421a-972e-764ef9a22d4a")
                        },
                        new
                        {
                            PermissionId = new Guid("931f674f-c2a5-434b-97b1-438a9131e55d"),
                            MenuId = new Guid("aaa52e09-ca9c-421a-972e-764ef9a22d4a")
                        },
                        new
                        {
                            PermissionId = new Guid("23bc31a3-6542-43d7-a4e8-6a953415e0d0"),
                            MenuId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6")
                        },
                        new
                        {
                            PermissionId = new Guid("a438dcc1-8a04-4859-b224-a1ec6235bad1"),
                            MenuId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6")
                        },
                        new
                        {
                            PermissionId = new Guid("077672d1-4a6c-4cc5-947e-7bc36954ee41"),
                            MenuId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6")
                        },
                        new
                        {
                            PermissionId = new Guid("c54c7024-87e7-43de-a5b1-2763296be889"),
                            MenuId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6")
                        },
                        new
                        {
                            PermissionId = new Guid("b9868f8e-1f05-4c89-a3f3-83c440961705"),
                            MenuId = new Guid("8a239c9f-4943-44d5-affc-2836c8da52a6")
                        },
                        new
                        {
                            PermissionId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("604688bf-66d9-4bf1-b5e0-9b6f3fff7073"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("5657088d-1870-4de4-918d-3698e92e7f22"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("42baa433-f392-4489-8f4e-d77b1c27978b"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("b968cb11-43a4-4bbe-a3ca-95a7d1bb9daa"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("b9e66192-1c2a-4dbf-97f6-79a6d861a872"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("94195d88-bd36-49b4-8bba-9f575e498b8d"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("e34710cc-d5eb-4a99-acaf-771a6dcd00f3"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("59114568-3b0c-44a9-950c-565fd6f67e23"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("99f8a553-8445-4d35-bb0e-6e3331353578"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("b43130fb-edbe-41a6-b4e0-07278191505c"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("9729da56-1152-4a10-8817-3f2b87a6f4a5"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("5921e3d9-33cb-40c3-95ec-aa30f27d8488"),
                            MenuId = new Guid("6a32cd92-f719-4ce0-b8c2-1e8b17ce5a06")
                        },
                        new
                        {
                            PermissionId = new Guid("b43130fb-edbe-41a6-b4e0-07278191505c"),
                            MenuId = new Guid("f0436c8d-0d2d-4b32-82a2-baac3a8f3d19")
                        },
                        new
                        {
                            PermissionId = new Guid("b9e66192-1c2a-4dbf-97f6-79a6d861a872"),
                            MenuId = new Guid("03fc5e29-4d7f-4a45-a898-e8cac402e226")
                        },
                        new
                        {
                            PermissionId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("3e7c5991-89d9-4a98-967e-71e68393ea3b"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("789a92c9-28b4-4200-b9f0-e1ebe8b9a7bf"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("037a2d46-d42c-406d-b14b-c7987a120c6b"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("815f5c0d-753c-4097-be96-4056ca5b54a7"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("6a9f0d7c-dcc4-4752-8614-c372bd4210c9"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("37b7b088-52a7-4788-955f-bb3d1149a3ea"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("11097b06-4d28-4cfc-8f22-a8fe9ab9aa26"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("d196fef8-e432-4218-bb45-59d82f8f7aec"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("f0a6cebc-72b1-41a6-b296-7eb965456a12"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("c1bcaa75-ec51-45c9-b90c-3b82783560d9"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("23fb6e24-0e15-42ea-884a-2f30137b6db1"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("cf61024a-089e-4020-89c7-69898deeb8ee"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("39232a82-7be1-4822-97a1-fe96598a78b0"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("4ccfc4f8-442f-4bb6-ab0d-41da4b3ac7b6"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("0c3e0956-1350-4b0e-969d-3b0f5781ebae"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("fa9ec427-4953-4406-8806-7a03a0ddb90c"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("dd63bb5f-c4a7-4d1e-9be5-76ec499f2e98"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("e7ec3e67-8ba8-46d4-8a6c-9f003c264978"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("a952610e-01a1-4df8-a50b-87c750a8ce39"),
                            MenuId = new Guid("cc41f355-f2d3-445c-a03e-7936a26f1128")
                        },
                        new
                        {
                            PermissionId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("09b7d194-d6b3-43fb-9591-3b5fb9a2f145"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("549cc91b-62e2-4bcc-b428-2c7ca785167a"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("10ec79b9-dd1a-427f-b0bb-86963c29045a"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("4d32b6dc-f206-451a-9425-dbab00609b66"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("61c3d629-76bb-4755-8eba-891b833917fc"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("08a07881-ff1a-4975-95d0-96ee3cc91c74"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("0aafb075-aa20-4fff-9782-58b6a74928ef"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("a952610e-01a1-4df8-a50b-87c750a8ce39"),
                            MenuId = new Guid("d60cdae5-54a9-4924-af24-c29e5978f609")
                        },
                        new
                        {
                            PermissionId = new Guid("529e3ed5-51ea-4411-8fbb-ab62e99f7691"),
                            MenuId = new Guid("b809a0b1-15a4-492a-b3fe-929ff8470231")
                        },
                        new
                        {
                            PermissionId = new Guid("529e3ed5-51ea-4411-8fbb-ab62e99f7691"),
                            MenuId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e")
                        },
                        new
                        {
                            PermissionId = new Guid("a23e6968-b82a-404c-92ec-16e8ddb7651f"),
                            MenuId = new Guid("b5e1e8df-35fb-4672-b7a2-12a30a4bd29e")
                        },
                        new
                        {
                            PermissionId = new Guid("202eafde-1b56-428b-9b0b-60a8d5efe812"),
                            MenuId = new Guid("f7829a47-bcd2-4ede-b3ba-2624222437cd")
                        },
                        new
                        {
                            PermissionId = new Guid("74d411ab-8667-4801-b412-7c015d556466"),
                            MenuId = new Guid("f7829a47-bcd2-4ede-b3ba-2624222437cd")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstagramAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TariffType")
                        .HasColumnType("int");

                    b.Property<string>("TelePhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            Address = "officeA",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "officeA",
                            TariffType = 1,
                            TelePhoneNumber = "02112345678"
                        },
                        new
                        {
                            Id = new Guid("300649ef-fbc7-42d0-b13d-539e0597eebe"),
                            Address = "officeB",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "officeB",
                            TariffType = 1,
                            TelePhoneNumber = "02123456789"
                        },
                        new
                        {
                            Id = new Guid("1abfa749-a9b0-413d-8fda-e3674fc942c0"),
                            Address = "officeC",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "officeC",
                            TariffType = 1,
                            TelePhoneNumber = "02134567891"
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcquaintedWay")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationStatus")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IntroducerType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferrerMedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReferrerMedicalStaffId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("AddressValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAddresses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientCommitmentForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommitmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAD")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientCommitmentForms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientContacts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFiless");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientIllnessForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAD")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IllnessReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RestPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientIllnessForms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientReferralForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAD")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferralReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientReferralForms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientTags");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShown")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionPermission",
                            PersianName = "دسترسی پذیرش"
                        },
                        new
                        {
                            Id = new Guid("8266f349-234c-400a-9670-4676b75d019c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionEdit",
                            ParentId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            PersianName = "ویرایش پذیرش"
                        },
                        new
                        {
                            Id = new Guid("953ebbbe-a4f2-49b7-9273-8fceed61479e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionDelete",
                            ParentId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            PersianName = "حذف پذیرش"
                        },
                        new
                        {
                            Id = new Guid("a3f8ca65-004e-4c5f-a3da-0c13b5b3d033"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionDateChange",
                            ParentId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            PersianName = "تغییر تاریخ پذیرش"
                        },
                        new
                        {
                            Id = new Guid("a46bf033-b50d-4e11-8c5d-0e404ed97b9f"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionDebtRegistration",
                            ParentId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            PersianName = "ثبت بدهی"
                        },
                        new
                        {
                            Id = new Guid("ac4c98c9-0295-4bea-b34b-19660f948852"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionReturnregistration",
                            ParentId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            PersianName = "ثبت برگشتی"
                        },
                        new
                        {
                            Id = new Guid("e4f9046b-7b60-4187-8f7d-50aeb32d7071"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReceptionShiftChange",
                            ParentId = new Guid("7469a760-7fe8-43cf-9165-a8e415f91774"),
                            PersianName = "تغییر شیفت"
                        },
                        new
                        {
                            Id = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FilePermission",
                            PersianName = "دسترسی پرونده"
                        },
                        new
                        {
                            Id = new Guid("ea53dd69-35c5-43f7-a0aa-be02f24bfa71"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AllFilesPermission",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "دسترسی به کل پرونده ها"
                        },
                        new
                        {
                            Id = new Guid("f1568f21-659f-42d4-9a65-306acf0501c1"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FileEdit",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "ویرایش پرونده"
                        },
                        new
                        {
                            Id = new Guid("520df499-cb60-45b7-9f48-a142694c9ff6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FileDelete",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "حذف پرونده"
                        },
                        new
                        {
                            Id = new Guid("583b93b7-60b0-418b-9f70-e3d22032a08a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FileRegistration",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "ثبت پرونده"
                        },
                        new
                        {
                            Id = new Guid("cd77a3e3-f0c1-427f-9dcb-e098f53167d4"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FilePrePaymentRegistration",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "ثبت مبلغ پیش پرداخت"
                        },
                        new
                        {
                            Id = new Guid("086109f0-8508-472e-a644-12f40f32177f"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FilePrePaymentDateChange",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "تغییر تاریخ پیش پرداخت"
                        },
                        new
                        {
                            Id = new Guid("1b419f29-ce34-4c4e-ad7c-2804d8a6e15a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FileExcel",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "خروجی اکسل پرونده"
                        },
                        new
                        {
                            Id = new Guid("00826518-1bb8-4052-b9e1-0e64a5a6f7be"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FileChangeUser",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "تغییر کاربر پرونده"
                        },
                        new
                        {
                            Id = new Guid("362754cf-e06e-466d-9d90-473360ec4308"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FilePermissionPatientNumber",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = "دسترسی به شمار تلفن بیمار"
                        },
                        new
                        {
                            Id = new Guid("8384e4ab-3784-4a13-b11a-27e43be3a827"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FilePermissionPictures",
                            ParentId = new Guid("b15e5500-998f-40dc-80f2-983c5b1c1aba"),
                            PersianName = " دسترسی به تصاویر پرونده"
                        },
                        new
                        {
                            Id = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorsPermission",
                            PersianName = "دسترسی پزشکان"
                        },
                        new
                        {
                            Id = new Guid("604688bf-66d9-4bf1-b5e0-9b6f3fff7073"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionVisitRegistration",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "ثبت ویزیت"
                        },
                        new
                        {
                            Id = new Guid("5657088d-1870-4de4-918d-3698e92e7f22"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionVisitEdit",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "ویرایش ویزیت"
                        },
                        new
                        {
                            Id = new Guid("42baa433-f392-4489-8f4e-d77b1c27978b"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionVisitDelete",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "حذف ویزیت"
                        },
                        new
                        {
                            Id = new Guid("b968cb11-43a4-4bbe-a3ca-95a7d1bb9daa"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionPatientHistory",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "سوابق بیمار"
                        },
                        new
                        {
                            Id = new Guid("b9e66192-1c2a-4dbf-97f6-79a6d861a872"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionLightPen",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی به قلم نوری"
                        },
                        new
                        {
                            Id = new Guid("94195d88-bd36-49b4-8bba-9f575e498b8d"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionPictures",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = " دسترسی به تصاویر ویزیت"
                        },
                        new
                        {
                            Id = new Guid("e34710cc-d5eb-4a99-acaf-771a6dcd00f3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionCommitments",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی به تعهدنامه ها"
                        },
                        new
                        {
                            Id = new Guid("59114568-3b0c-44a9-950c-565fd6f67e23"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorOthersRegisteredVisitChange",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی تغییر در ویزیت های ثبت شده دیگران"
                        },
                        new
                        {
                            Id = new Guid("99f8a553-8445-4d35-bb0e-6e3331353578"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionForms",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی فرم ها"
                        },
                        new
                        {
                            Id = new Guid("b43130fb-edbe-41a6-b4e0-07278191505c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionPrescription",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی به نسخه نویسی"
                        },
                        new
                        {
                            Id = new Guid("9729da56-1152-4a10-8817-3f2b87a6f4a5"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionFileBrief",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی به خلاصه پرونده"
                        },
                        new
                        {
                            Id = new Guid("5921e3d9-33cb-40c3-95ec-aa30f27d8488"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DoctorPermissionPMH",
                            ParentId = new Guid("365298ad-1986-45c5-a74b-3173b6f90655"),
                            PersianName = "دسترسی به PMH"
                        },
                        new
                        {
                            Id = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportPermission",
                            PersianName = "دسترسی گزارشات"
                        },
                        new
                        {
                            Id = new Guid("3e7c5991-89d9-4a98-967e-71e68393ea3b"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportDailyCash",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "صندوق روزانه"
                        },
                        new
                        {
                            Id = new Guid("789a92c9-28b4-4200-b9f0-e1ebe8b9a7bf"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportFinancial",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش مالی"
                        },
                        new
                        {
                            Id = new Guid("037a2d46-d42c-406d-b14b-c7987a120c6b"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportExpense",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش هزینه ها"
                        },
                        new
                        {
                            Id = new Guid("815f5c0d-753c-4097-be96-4056ca5b54a7"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportDebtors",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارشات بدهکاران"
                        },
                        new
                        {
                            Id = new Guid("6a9f0d7c-dcc4-4752-8614-c372bd4210c9"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportDeposit",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش بیعانه"
                        },
                        new
                        {
                            Id = new Guid("37b7b088-52a7-4788-955f-bb3d1149a3ea"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportIntroducers",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش معرف ها"
                        },
                        new
                        {
                            Id = new Guid("11097b06-4d28-4cfc-8f22-a8fe9ab9aa26"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportInstallment",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش اقساط"
                        },
                        new
                        {
                            Id = new Guid("d196fef8-e432-4218-bb45-59d82f8f7aec"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportElectronicPrescription",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش نسخ الکترونیک"
                        },
                        new
                        {
                            Id = new Guid("f0a6cebc-72b1-41a6-b296-7eb965456a12"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportStatuseofPatients",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش وضعیت مراجعه بیماران"
                        },
                        new
                        {
                            Id = new Guid("c1bcaa75-ec51-45c9-b90c-3b82783560d9"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportServicesProvided",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش خدمات ارائه شده"
                        },
                        new
                        {
                            Id = new Guid("23fb6e24-0e15-42ea-884a-2f30137b6db1"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportAppointment",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش وقتدهی"
                        },
                        new
                        {
                            Id = new Guid("cf61024a-089e-4020-89c7-69898deeb8ee"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportDoctorsPerformancd",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش کار کرد پزشکان"
                        },
                        new
                        {
                            Id = new Guid("39232a82-7be1-4822-97a1-fe96598a78b0"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportExpertsPerformancd",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش کارکرد کارشناس"
                        },
                        new
                        {
                            Id = new Guid("4ccfc4f8-442f-4bb6-ab0d-41da4b3ac7b6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportInsurances",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش بیمه ها و گزارش بیمه تکمیلی"
                        },
                        new
                        {
                            Id = new Guid("0c3e0956-1350-4b0e-969d-3b0f5781ebae"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportInsuranceVersions",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش ارسال نسخ بیمه"
                        },
                        new
                        {
                            Id = new Guid("fa9ec427-4953-4406-8806-7a03a0ddb90c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportReturns",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش برگشتی ها"
                        },
                        new
                        {
                            Id = new Guid("dd63bb5f-c4a7-4d1e-9be5-76ec499f2e98"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportStaticticalVisits",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش آماری ویزیت ها"
                        },
                        new
                        {
                            Id = new Guid("e7ec3e67-8ba8-46d4-8a6c-9f003c264978"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportSpecialForms",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش از فرم های اختصاصی"
                        },
                        new
                        {
                            Id = new Guid("a952610e-01a1-4df8-a50b-87c750a8ce39"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ReportStore",
                            ParentId = new Guid("05a066f7-0a5e-4e70-a382-65e18453ae46"),
                            PersianName = "گزارش انبار"
                        },
                        new
                        {
                            Id = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StorePermission",
                            PersianName = "دسترسی انبار"
                        },
                        new
                        {
                            Id = new Guid("09b7d194-d6b3-43fb-9591-3b5fb9a2f145"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreDefinition",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "تعریف انبار"
                        },
                        new
                        {
                            Id = new Guid("549cc91b-62e2-4bcc-b428-2c7ca785167a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreComidityDefinition",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "تعریف کالا"
                        },
                        new
                        {
                            Id = new Guid("10ec79b9-dd1a-427f-b0bb-86963c29045a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreConsumerRegitration",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "ثبت مصرفی"
                        },
                        new
                        {
                            Id = new Guid("4d32b6dc-f206-451a-9425-dbab00609b66"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreComidityTrasportation",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "انتقال کالا"
                        },
                        new
                        {
                            Id = new Guid("61c3d629-76bb-4755-8eba-891b833917fc"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreRemittanceRegitration",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "ثبت حواله"
                        },
                        new
                        {
                            Id = new Guid("08a07881-ff1a-4975-95d0-96ee3cc91c74"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreRemittanceEdit",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "ویرایش حواله"
                        },
                        new
                        {
                            Id = new Guid("0aafb075-aa20-4fff-9782-58b6a74928ef"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StoreRemittanceDelete",
                            ParentId = new Guid("d5eccfd3-a6c9-422b-835a-a77f0295481f"),
                            PersianName = "حذف حواله"
                        },
                        new
                        {
                            Id = new Guid("23bc31a3-6542-43d7-a4e8-6a953415e0d0"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppointmentPermission",
                            PersianName = "دسترسی وقت دهی"
                        },
                        new
                        {
                            Id = new Guid("a438dcc1-8a04-4859-b224-a1ec6235bad1"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppointmentRegistration",
                            ParentId = new Guid("23bc31a3-6542-43d7-a4e8-6a953415e0d0"),
                            PersianName = "دسترسی به ثبت وقت"
                        },
                        new
                        {
                            Id = new Guid("077672d1-4a6c-4cc5-947e-7bc36954ee41"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppointmentDelete",
                            ParentId = new Guid("23bc31a3-6542-43d7-a4e8-6a953415e0d0"),
                            PersianName = "دسترسی به حذف وقت"
                        },
                        new
                        {
                            Id = new Guid("c54c7024-87e7-43de-a5b1-2763296be889"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppointmentCancelation",
                            ParentId = new Guid("23bc31a3-6542-43d7-a4e8-6a953415e0d0"),
                            PersianName = "دسترسی به کنسل وقت"
                        },
                        new
                        {
                            Id = new Guid("b9868f8e-1f05-4c89-a3f3-83c440961705"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppointmentRegistrationforSelectedDoctors",
                            ParentId = new Guid("23bc31a3-6542-43d7-a4e8-6a953415e0d0"),
                            PersianName = "دسترسی به ثبت وقت برای پزشکان انتخاب شده"
                        },
                        new
                        {
                            Id = new Guid("529e3ed5-51ea-4411-8fbb-ab62e99f7691"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasicInfoPermission",
                            PersianName = "دسترسی اطلاعات پایه"
                        },
                        new
                        {
                            Id = new Guid("a23e6968-b82a-404c-92ec-16e8ddb7651f"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasicInfoPermission",
                            ParentId = new Guid("529e3ed5-51ea-4411-8fbb-ab62e99f7691"),
                            PersianName = "دسترسی اطلاعات پایه"
                        },
                        new
                        {
                            Id = new Guid("9301e02e-c11d-4c8f-bc72-c40c6322eebb"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardPermission",
                            PersianName = "دسترسی به داشبورد"
                        },
                        new
                        {
                            Id = new Guid("7dbb0a47-6aa3-442e-959a-e4d5fffeeac4"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DashboardPermission",
                            ParentId = new Guid("9301e02e-c11d-4c8f-bc72-c40c6322eebb"),
                            PersianName = "دسترسی به داشبورد"
                        },
                        new
                        {
                            Id = new Guid("3f75033b-be8a-47e7-b86a-fa67c48785dc"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PreparedPatternsPermission",
                            PersianName = "دسترسی به الگوهای آماده"
                        },
                        new
                        {
                            Id = new Guid("ef25d083-6049-4d97-a0b6-b9f34c37b6af"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PreparedPatternsPermission",
                            ParentId = new Guid("3f75033b-be8a-47e7-b86a-fa67c48785dc"),
                            PersianName = "دسترسی به الگوهای آماده"
                        },
                        new
                        {
                            Id = new Guid("202eafde-1b56-428b-9b0b-60a8d5efe812"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SupportPermission",
                            PersianName = "دسترسی پشتیبانی"
                        },
                        new
                        {
                            Id = new Guid("74d411ab-8667-4801-b412-7c015d556466"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SupportPermission",
                            ParentId = new Guid("202eafde-1b56-428b-9b0b-60a8d5efe812"),
                            PersianName = "دسترسی پشتیبانی"
                        },
                        new
                        {
                            Id = new Guid("0f8e8881-c090-4d01-9ba7-c2fdb42549b3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TodayPatientPermission",
                            PersianName = "دسترسی بیماران امروز"
                        },
                        new
                        {
                            Id = new Guid("931f674f-c2a5-434b-97b1-438a9131e55d"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsShown = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TodayPatientPermission",
                            ParentId = new Guid("0f8e8881-c090-4d01-9ba7-c2fdb42549b3"),
                            PersianName = "دسترسی بیماران امروز"
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PhysicalExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BMI")
                        .HasColumnType("real");

                    b.Property<float>("BSA")
                        .HasColumnType("real");

                    b.Property<float>("BloodPressureMax")
                        .HasColumnType("real");

                    b.Property<float>("BloodPressureMin")
                        .HasColumnType("real");

                    b.Property<float>("Breathing")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Diet")
                        .HasColumnType("bit");

                    b.Property<string>("ExamDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FastBloodSugar")
                        .HasColumnType("real");

                    b.Property<float>("Heat")
                        .HasColumnType("real");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PO2")
                        .HasColumnType("real");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Pulse")
                        .HasColumnType("real");

                    b.Property<float>("SPO2")
                        .HasColumnType("real");

                    b.Property<float>("Waist")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PhysicalExams");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PMH", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PMH");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Reception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactorNo")
                        .HasColumnType("int");

                    b.Property<int>("FactorNoToday")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDebt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReceptionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TotalDebt")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalReceived")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalReceptionCost")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDebt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ReceptionDebtPrice")
                        .HasColumnType("real");

                    b.Property<int>("ReceptionDebtStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceptionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReceptionDetailId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("ReceptionDebts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AdditionalInsuranceShare")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Debt")
                        .HasColumnType("bigint");

                    b.Property<long>("Deposit")
                        .HasColumnType("bigint");

                    b.Property<long>("Discount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDebt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrganShare")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientShare")
                        .HasColumnType("bigint");

                    b.Property<long>("Payable")
                        .HasColumnType("bigint");

                    b.Property<long>("Received")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Tariff")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalInsuranceId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReceptionDetails");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid?>("DiscountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("MembershipId");

                    b.ToTable("ReceptionDiscounts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionMedicalStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalStaffServiceSharePercentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceptionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SharePercent")
                        .HasColumnType("real");

                    b.Property<decimal>("SharePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("MedicalStaffServiceSharePercentId");

                    b.HasIndex("ReceptionDetailId");

                    b.ToTable("ReceptionMedicalStaffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInReception")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("95632500-3619-48e0-a774-2494b819b594"),
                            ConcurrencyStamp = "f4086f2a-7565-466a-a95d-5adaf89334e3",
                            Name = "Patient",
                            NormalizedName = "PATIENT",
                            PersianName = "بیمار",
                            ShowInReception = false
                        },
                        new
                        {
                            Id = new Guid("70508b44-eae8-4d40-9318-651ae5b38f40"),
                            ConcurrencyStamp = "1ef881fc-edde-4aa0-a7cb-41977d580df2",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            PersianName = "ادمین",
                            ShowInReception = false
                        },
                        new
                        {
                            Id = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c"),
                            ConcurrencyStamp = "cbe0f5b5-ee6c-4ef2-94b9-982ab8207e45",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR",
                            PersianName = "پزشک",
                            ShowInReception = false
                        },
                        new
                        {
                            Id = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6"),
                            ConcurrencyStamp = "d55b8024-3108-4051-93dd-877c73026018",
                            Name = "Expert",
                            NormalizedName = "EXPERT",
                            PersianName = "کارشناس",
                            ShowInReception = false
                        },
                        new
                        {
                            Id = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7"),
                            ConcurrencyStamp = "453ae29c-83e9-48f9-88cd-e2f06b8a3050",
                            Name = "Secretary",
                            NormalizedName = "SECRETARY",
                            PersianName = "منشی",
                            ShowInReception = false
                        },
                        new
                        {
                            Id = new Guid("aca86b1a-8e36-4467-9e3c-2f826822df10"),
                            ConcurrencyStamp = "3073373d-6f05-4ddf-86d5-d20582a519a2",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            PersianName = "سوپر ادمین",
                            ShowInReception = false
                        },
                        new
                        {
                            Id = new Guid("60eeaf14-a2e6-40df-abdc-31dfb55d0488"),
                            ConcurrencyStamp = "8ea73abb-633c-4421-981c-33ca00f71ec8",
                            Name = "ExternalReferrer",
                            NormalizedName = "EXTERNALREFERRER",
                            PersianName = "معرف خارجی",
                            ShowInReception = false
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("604688bf-66d9-4bf1-b5e0-9b6f3fff7073"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("5657088d-1870-4de4-918d-3698e92e7f22"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("42baa433-f392-4489-8f4e-d77b1c27978b"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("b968cb11-43a4-4bbe-a3ca-95a7d1bb9daa"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("b9e66192-1c2a-4dbf-97f6-79a6d861a872"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("94195d88-bd36-49b4-8bba-9f575e498b8d"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("e34710cc-d5eb-4a99-acaf-771a6dcd00f3"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("59114568-3b0c-44a9-950c-565fd6f67e23"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("99f8a553-8445-4d35-bb0e-6e3331353578"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("b43130fb-edbe-41a6-b4e0-07278191505c"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("9729da56-1152-4a10-8817-3f2b87a6f4a5"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("5921e3d9-33cb-40c3-95ec-aa30f27d8488"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("a438dcc1-8a04-4859-b224-a1ec6235bad1"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("077672d1-4a6c-4cc5-947e-7bc36954ee41"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("c54c7024-87e7-43de-a5b1-2763296be889"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("b9868f8e-1f05-4c89-a3f3-83c440961705"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("789a92c9-28b4-4200-b9f0-e1ebe8b9a7bf"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("dd63bb5f-c4a7-4d1e-9be5-76ec499f2e98"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("7dbb0a47-6aa3-442e-959a-e4d5fffeeac4"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("74d411ab-8667-4801-b412-7c015d556466"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("931f674f-c2a5-434b-97b1-438a9131e55d"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            PermissionId = new Guid("604688bf-66d9-4bf1-b5e0-9b6f3fff7073"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("5657088d-1870-4de4-918d-3698e92e7f22"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("42baa433-f392-4489-8f4e-d77b1c27978b"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("b968cb11-43a4-4bbe-a3ca-95a7d1bb9daa"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("b9e66192-1c2a-4dbf-97f6-79a6d861a872"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("94195d88-bd36-49b4-8bba-9f575e498b8d"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("e34710cc-d5eb-4a99-acaf-771a6dcd00f3"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("59114568-3b0c-44a9-950c-565fd6f67e23"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("99f8a553-8445-4d35-bb0e-6e3331353578"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("b43130fb-edbe-41a6-b4e0-07278191505c"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("9729da56-1152-4a10-8817-3f2b87a6f4a5"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("5921e3d9-33cb-40c3-95ec-aa30f27d8488"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("a438dcc1-8a04-4859-b224-a1ec6235bad1"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("077672d1-4a6c-4cc5-947e-7bc36954ee41"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("c54c7024-87e7-43de-a5b1-2763296be889"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("b9868f8e-1f05-4c89-a3f3-83c440961705"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("789a92c9-28b4-4200-b9f0-e1ebe8b9a7bf"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("dd63bb5f-c4a7-4d1e-9be5-76ec499f2e98"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("7dbb0a47-6aa3-442e-959a-e4d5fffeeac4"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("74d411ab-8667-4801-b412-7c015d556466"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("931f674f-c2a5-434b-97b1-438a9131e55d"),
                            RoleId = new Guid("bdb58210-f29f-4114-8564-7f3d5d2d26d6")
                        },
                        new
                        {
                            PermissionId = new Guid("ea53dd69-35c5-43f7-a0aa-be02f24bfa71"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("f1568f21-659f-42d4-9a65-306acf0501c1"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("520df499-cb60-45b7-9f48-a142694c9ff6"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("583b93b7-60b0-418b-9f70-e3d22032a08a"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("cd77a3e3-f0c1-427f-9dcb-e098f53167d4"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("086109f0-8508-472e-a644-12f40f32177f"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("1b419f29-ce34-4c4e-ad7c-2804d8a6e15a"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("00826518-1bb8-4052-b9e1-0e64a5a6f7be"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("362754cf-e06e-466d-9d90-473360ec4308"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("8384e4ab-3784-4a13-b11a-27e43be3a827"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("8266f349-234c-400a-9670-4676b75d019c"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("953ebbbe-a4f2-49b7-9273-8fceed61479e"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("a3f8ca65-004e-4c5f-a3da-0c13b5b3d033"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("a46bf033-b50d-4e11-8c5d-0e404ed97b9f"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("ac4c98c9-0295-4bea-b34b-19660f948852"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("e4f9046b-7b60-4187-8f7d-50aeb32d7071"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("a438dcc1-8a04-4859-b224-a1ec6235bad1"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("077672d1-4a6c-4cc5-947e-7bc36954ee41"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("c54c7024-87e7-43de-a5b1-2763296be889"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("b9868f8e-1f05-4c89-a3f3-83c440961705"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("3e7c5991-89d9-4a98-967e-71e68393ea3b"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("789a92c9-28b4-4200-b9f0-e1ebe8b9a7bf"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("037a2d46-d42c-406d-b14b-c7987a120c6b"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("815f5c0d-753c-4097-be96-4056ca5b54a7"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("6a9f0d7c-dcc4-4752-8614-c372bd4210c9"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("37b7b088-52a7-4788-955f-bb3d1149a3ea"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("11097b06-4d28-4cfc-8f22-a8fe9ab9aa26"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("d196fef8-e432-4218-bb45-59d82f8f7aec"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("f0a6cebc-72b1-41a6-b296-7eb965456a12"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("c1bcaa75-ec51-45c9-b90c-3b82783560d9"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("23fb6e24-0e15-42ea-884a-2f30137b6db1"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("cf61024a-089e-4020-89c7-69898deeb8ee"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("39232a82-7be1-4822-97a1-fe96598a78b0"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("4ccfc4f8-442f-4bb6-ab0d-41da4b3ac7b6"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("0c3e0956-1350-4b0e-969d-3b0f5781ebae"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("fa9ec427-4953-4406-8806-7a03a0ddb90c"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("dd63bb5f-c4a7-4d1e-9be5-76ec499f2e98"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("e7ec3e67-8ba8-46d4-8a6c-9f003c264978"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("a952610e-01a1-4df8-a50b-87c750a8ce39"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("7dbb0a47-6aa3-442e-959a-e4d5fffeeac4"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("74d411ab-8667-4801-b412-7c015d556466"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        },
                        new
                        {
                            PermissionId = new Guid("931f674f-c2a5-434b-97b1-438a9131e55d"),
                            RoleId = new Guid("779c69ef-6857-4e19-b24e-1c4c4b2635d7")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RoutineMedication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConsumptionWay")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FDOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FDOId");

                    b.HasIndex("PatientId");

                    b.ToTable("RoutineMedications");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RVU3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RVU3");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5da2506e-6393-4490-9242-be7b12ed407e"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "لاغری",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("0280a157-2c58-40f9-9345-f3cf0918eaee"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "پوست",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("50a389f9-e6ed-437e-a503-2aa96d0a4f94"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "لیزر",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("0d3c5f9f-31fd-4fb2-819a-633160ecbeb6"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "جراحی",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            isActive = true
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalculationMethod")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenericCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICD10Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConsumingMaterials")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPractical")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceTime")
                        .HasColumnType("int");

                    b.Property<bool>("TariffInReceptionTime")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SectionId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80b93f6f-133a-472f-65fc-08dae718ece9"),
                            CalculationMethod = 1,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenericCode = "3535434364",
                            ICD10Name = "",
                            IsConsumingMaterials = true,
                            IsDeleted = false,
                            IsPractical = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "اسکالپشور",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            SectionId = new Guid("5da2506e-6393-4490-9242-be7b12ed407e"),
                            ServiceTime = 50,
                            TariffInReceptionTime = false
                        },
                        new
                        {
                            Id = new Guid("5e4c3082-7ba2-4d08-8fe7-741c05606bc9"),
                            CalculationMethod = 1,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenericCode = "345464646",
                            ICD10Name = "",
                            IsConsumingMaterials = true,
                            IsDeleted = false,
                            IsPractical = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "پیکرتراشی",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            SectionId = new Guid("5da2506e-6393-4490-9242-be7b12ed407e"),
                            ServiceTime = 50,
                            TariffInReceptionTime = false
                        },
                        new
                        {
                            Id = new Guid("01767db5-fa5e-4d72-833f-4f1a1c581243"),
                            CalculationMethod = 1,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenericCode = "46564456",
                            ICD10Name = "",
                            IsConsumingMaterials = true,
                            IsDeleted = false,
                            IsPractical = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "تزریق ژل",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            SectionId = new Guid("0280a157-2c58-40f9-9345-f3cf0918eaee"),
                            ServiceTime = 10,
                            TariffInReceptionTime = false
                        },
                        new
                        {
                            Id = new Guid("223e92a3-1e75-4387-b1ff-58a36bb5fac7"),
                            CalculationMethod = 1,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenericCode = "545646464",
                            ICD10Name = "",
                            IsConsumingMaterials = true,
                            IsDeleted = false,
                            IsPractical = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "هایفو",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            SectionId = new Guid("0280a157-2c58-40f9-9345-f3cf0918eaee"),
                            ServiceTime = 40,
                            TariffInReceptionTime = false
                        },
                        new
                        {
                            Id = new Guid("9d8f2456-0940-45f7-bcea-9497d7ba6b97"),
                            CalculationMethod = 1,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenericCode = "554564466464",
                            ICD10Name = "",
                            IsConsumingMaterials = true,
                            IsDeleted = false,
                            IsPractical = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "لیزر مو",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            SectionId = new Guid("50a389f9-e6ed-437e-a503-2aa96d0a4f94"),
                            ServiceTime = 30,
                            TariffInReceptionTime = false
                        },
                        new
                        {
                            Id = new Guid("833ce0b6-0456-4396-ad2b-020b7921ddc3"),
                            CalculationMethod = 1,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenericCode = "465415651",
                            ICD10Name = "",
                            IsConsumingMaterials = true,
                            IsDeleted = false,
                            IsPractical = true,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "لیزر پوست",
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            SectionId = new Guid("50a389f9-e6ed-437e-a503-2aa96d0a4f94"),
                            ServiceTime = 20,
                            TariffInReceptionTime = false
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ServiceDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2811b4b-27b4-4f65-9050-b0c12954d65c"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 30,
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalStaffId = new Guid("803224e8-efc5-4998-b602-08dae7043559"),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            ServiceId = new Guid("80b93f6f-133a-472f-65fc-08dae718ece9")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ServiceRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRooms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Nextday")
                        .HasColumnType("bit");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SNOMED", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SNOMED");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SocialHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasLeadToDeath")
                        .HasColumnType("bit");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Relativity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SocialHistories");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ba9ddbe-0d1e-47cc-807f-3ea8d9a04ef3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "متخصص قلب"
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Difference")
                        .HasColumnType("real");

                    b.Property<Guid?>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InsurancePercent")
                        .HasColumnType("int");

                    b.Property<float>("InternalTariffValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<long?>("TariffInsuranceCode")
                        .HasColumnType("bigint");

                    b.Property<float>("TariffValue")
                        .HasColumnType("real");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e8e1a23-f799-420a-953d-e5f50940b63e",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "پرستو",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "هاشمی",
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NationalId = "0493198628",
                            NormalizedUserName = "+989126592427",
                            PhoneNumber = "+989126592427",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "661e0694-d255-4dca-92ae-1f570be6dc31",
                            TwoFactorEnabled = false,
                            UserName = "+989126592427"
                        },
                        new
                        {
                            Id = new Guid("28b4f560-5a36-4816-8646-b94486bb7464"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb6d6da0-641a-4f89-bc43-9e6f68a3768a",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "سپیده",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "هاشمی",
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NationalId = "0113048998",
                            NormalizedUserName = "+989126802366",
                            PhoneNumber = "+989126802366",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9fa77e7-cd87-4095-8593-f4e59dc8bf01",
                            TwoFactorEnabled = false,
                            UserName = "+989126802366"
                        },
                        new
                        {
                            Id = new Guid("5e31b2e7-4beb-4e0b-be39-f9b3300999fe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb9f1591-3ead-4723-9ade-640c0d0019bf",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "وحید",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "بابایی",
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NationalId = "4610607964",
                            NormalizedUserName = "+989374807400",
                            PhoneNumber = "+989374807400",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2156dd8-484d-4acd-887d-052e9bf331dd",
                            TwoFactorEnabled = false,
                            UserName = "+989374807400"
                        },
                        new
                        {
                            Id = new Guid("d53c3b49-47ed-4647-aef5-01397ea68cea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf059202-5fcf-4e7a-8723-b54f31dce657",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "رضا",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "احمدی",
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NationalId = "0269591176",
                            NormalizedUserName = "+989122684568",
                            PhoneNumber = "+989122684568",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc0f74d0-dcd4-40aa-ae3e-129dfaa2fa83",
                            TwoFactorEnabled = false,
                            UserName = "+989122684568"
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOfficePermissions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOfficeRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44d05e2b-b4f8-4358-b3ba-2b6c71b8465a"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("aca86b1a-8e36-4467-9e3c-2f826822df10"),
                            UserId = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d")
                        },
                        new
                        {
                            Id = new Guid("53b90ece-304b-44eb-9291-2a972dc302e0"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            RoleId = new Guid("95632500-3619-48e0-a774-2494b819b594"),
                            UserId = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d")
                        },
                        new
                        {
                            Id = new Guid("0f563b4e-8156-439a-a144-312de08becde"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            RoleId = new Guid("70508b44-eae8-4d40-9318-651ae5b38f40"),
                            UserId = new Guid("5e31b2e7-4beb-4e0b-be39-f9b3300999fe")
                        },
                        new
                        {
                            Id = new Guid("5bb6cf2d-f4c6-4936-8e97-c8ba779954bd"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            RoleId = new Guid("70508b44-eae8-4d40-9318-651ae5b38f40"),
                            UserId = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d")
                        },
                        new
                        {
                            Id = new Guid("f88b4248-9fcf-408d-ad5b-8862cb9d6b47"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c"),
                            UserId = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d")
                        },
                        new
                        {
                            Id = new Guid("1c7c2a1a-9beb-487a-bfff-8886c2e9d03f"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c"),
                            UserId = new Guid("28b4f560-5a36-4816-8646-b94486bb7464")
                        },
                        new
                        {
                            Id = new Guid("931a1e68-2e9a-4df9-adbe-405fb70fbef9"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeId = new Guid("40dcd9d7-4765-4aa4-ae98-287108b608b0"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c"),
                            UserId = new Guid("d53c3b49-47ed-4647-aef5-01397ea68cea")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Referrer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Referrer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d"),
                            RoleId = new Guid("aca86b1a-8e36-4467-9e3c-2f826822df10")
                        },
                        new
                        {
                            UserId = new Guid("5e31b2e7-4beb-4e0b-be39-f9b3300999fe"),
                            RoleId = new Guid("aca86b1a-8e36-4467-9e3c-2f826822df10")
                        },
                        new
                        {
                            UserId = new Guid("eaef7edd-c18a-4cce-a450-72ee26c18a8d"),
                            RoleId = new Guid("95632500-3619-48e0-a774-2494b819b594")
                        },
                        new
                        {
                            UserId = new Guid("28b4f560-5a36-4816-8646-b94486bb7464"),
                            RoleId = new Guid("8c07113f-ec06-4db0-90c7-e1d292525c7c")
                        },
                        new
                        {
                            UserId = new Guid("d53c3b49-47ed-4647-aef5-01397ea68cea"),
                            RoleId = new Guid("95632500-3619-48e0-a774-2494b819b594")
                        });
                });

            modelBuilder.Entity("MedicalOffice.Domain.Device", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany()
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("MedicalOffice.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalStaff");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Allergy", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.FDO", "FDO")
                        .WithMany("Allergies")
                        .HasForeignKey("FDOId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("Allergies")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FDO");

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.User", "CreatedBy")
                        .WithMany("AppointmentsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Device", "Device")
                        .WithMany("Appointments")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedicalOffice.Domain.Entities.User", "LastUpdatedBy")
                        .WithMany("AppointmentsLastUpdatedBy")
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Appointments")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("MedicalOffice.Domain.Referrer", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId");

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Room", "Room")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceRoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Device");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Office");

                    b.Navigation("Referrer");

                    b.Navigation("Room");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.AppointmentService", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.BasicInfo", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", null)
                        .WithMany("BasicInfos")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.BasicInfoDetail", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.BasicInfo", "basicInfo")
                        .WithMany("BasicInfoDetails")
                        .HasForeignKey("basicInfoId");

                    b.Navigation("basicInfo");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Cash", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Reception", "Reception")
                        .WithMany("Cashs")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashCart", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Bank", "Bank")
                        .WithMany("CashCarts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Cash", "Cash")
                        .WithMany("CashCarts")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("CashCarts")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Cash");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashCheck", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Bank", "Bank")
                        .WithMany("CashChecks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Cash", "Cash")
                        .WithMany("CashChecks")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("CashChecks")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Cash");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashMoney", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Cash", "Cash")
                        .WithMany("CashMoneies")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("CashMoneies")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cash");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.CashPos", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Bank", "Bank")
                        .WithMany("CashPoses")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Cash", "Cash")
                        .WithMany("CashPoses")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("CashPoses")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Cash");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Diagnose", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("Diagnoses")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DiscountType", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("DiscountTypes")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Drug", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.DrugConsumption", "DrugConsumption")
                        .WithMany("DrugPres")
                        .HasForeignKey("DrugConsumptionId");

                    b.HasOne("MedicalOffice.Domain.Entities.DrugSection", "DrugSection")
                        .WithMany("DrugPres")
                        .HasForeignKey("DrugSectionId");

                    b.HasOne("MedicalOffice.Domain.Entities.DrugShape", "DrugShape")
                        .WithMany("DrugPres")
                        .HasForeignKey("DrugShapeId");

                    b.HasOne("MedicalOffice.Domain.Entities.DrugUsage", "DrugUsage")
                        .WithMany("DrugPres")
                        .HasForeignKey("DrugUsageId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugConsumption");

                    b.Navigation("DrugSection");

                    b.Navigation("DrugShape");

                    b.Navigation("DrugUsage");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugAbuse", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("DrugAbuses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.SNOMED", "SNOMED")
                        .WithMany("DrugAbuses")
                        .HasForeignKey("SNOMEDId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SNOMED");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugIntraction", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Drug", "PDrug")
                        .WithMany("PDrugs")
                        .HasForeignKey("PDrugId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedicalOffice.Domain.Entities.Drug", "SDrug")
                        .WithMany("SDrugs")
                        .HasForeignKey("SDrugId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PDrug");

                    b.Navigation("SDrug");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugPrescription", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.FDO", "FDO")
                        .WithMany("DrugPrescriptions")
                        .HasForeignKey("FDOId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("DrugPrescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FDO");

                    b.Navigation("Office");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Experiment", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormCommitment", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("FormCommitments")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormIllness", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("FormIllnesses")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormReferal", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("FormReferals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.GeneralExamination", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("GeneralExaminations")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("GeneralExaminations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Insurance", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Insurances")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Introducer", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("Introduceres")
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Introducers")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Introduceres")
                        .HasForeignKey("PatientId");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Office");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplier", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("KMultipliers")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplierDetail", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.KMultiplier", "KMultiplier")
                        .WithMany("KMultiplierDetails")
                        .HasForeignKey("KMultiplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KMultiplier");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalAction", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalActions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.RVU3", "RVU3")
                        .WithMany("MedicalActions")
                        .HasForeignKey("RVU3Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RVU3");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaff", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("MedicalStaffs")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId");

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany("MedicalStaffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Role");

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffSchedule", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("MedicalStaffSchedules")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalStaff");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffServiceSharePercent", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Section", "Section")
                        .WithMany("MedicalStaffServiceSharePercents")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("MedicalStaffServiceSharePercents")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Shift", "Shift")
                        .WithMany("MedicalStaffServiceSharePercents")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Service");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Membership", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Memberships")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MemberShipService", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Membership", "MemberShip")
                        .WithMany("MemberShipServices")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("MemberShipServices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("MemberShipServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemberShip");

                    b.Navigation("Office");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MenuPermission", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Permission", "Permission")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Patient", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany("Patients")
                        .HasForeignKey("InsuranceId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Patients")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "ReferrerMedicalStaff")
                        .WithMany("Patients")
                        .HasForeignKey("ReferrerMedicalStaffId");

                    b.Navigation("Insurance");

                    b.Navigation("Office");

                    b.Navigation("ReferrerMedicalStaff");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientAddress", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientCommitmentForm", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientCommitmentForms")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientContact", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientContacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientFiles", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientFiless")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientIllnessForm", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientIllnessForms")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientReferralForm", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientReferralForms")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientTag", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PhysicalExam", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PhysicalExams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Picture", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Pictures")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Pictures")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PMH", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("PMHs")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PMHs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Reception", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Receptions")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Receptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Shift", "Shift")
                        .WithMany("Receptions")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Appointment");

                    b.Navigation("Office");

                    b.Navigation("Patient");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDebt", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.ReceptionDetail", "ReceptionDetail")
                        .WithMany("ReceptionDebts")
                        .HasForeignKey("ReceptionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Reception", "Reception")
                        .WithMany("ReceptionDebts")
                        .HasForeignKey("ReceptionId");

                    b.Navigation("Office");

                    b.Navigation("Reception");

                    b.Navigation("ReceptionDetail");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDetail", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany("ReceptionDetails_Insurance")
                        .HasForeignKey("AdditionalInsuranceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("ReceptionDetails")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Reception", "Reception")
                        .WithMany("ReceptionDetails")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("ReceptionDetails_Service")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Insurance");

                    b.Navigation("Office");

                    b.Navigation("Reception");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDiscount", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.DiscountType", null)
                        .WithMany("ReceptionDiscounts")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("MedicalOffice.Domain.Entities.Membership", "Membership")
                        .WithMany("ReceptionDiscounts")
                        .HasForeignKey("MembershipId");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionMedicalStaff", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", null)
                        .WithMany("ReceptionMedicalStaffs")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaffServiceSharePercent", null)
                        .WithMany("ReceptionMedicalStaffs")
                        .HasForeignKey("MedicalStaffServiceSharePercentId");

                    b.HasOne("MedicalOffice.Domain.Entities.ReceptionDetail", "ReceptionDetail")
                        .WithMany("ReceptionMedicalStaffs")
                        .HasForeignKey("ReceptionDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceptionDetail");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Room", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RoutineMedication", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.FDO", "FDO")
                        .WithMany("RoutineMedications")
                        .HasForeignKey("FDOId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("RoutineMedications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FDO");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Section", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Sections")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Service", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", null)
                        .WithMany("Services")
                        .HasForeignKey("InsuranceId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Services")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Section", "Section")
                        .WithMany("Services")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ServiceDuration", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany()
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("ServiceDuration")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalStaff");

                    b.Navigation("Office");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ServiceRoom", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Room", "Room")
                        .WithMany("ServiceRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("ServiceRooms")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Shift", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Shifts")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SocialHistory", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("SocialHistories")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("SocialHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Tariff", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany("Tariffs")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Tariffs")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("Tariffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Office");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficePermission", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("UserOfficePermissions")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Permission", "Permission")
                        .WithMany("UserOfficePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany("UserOfficePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeRole", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("UserOfficeRoles")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedicalOffice.Domain.Entities.Role", "Role")
                        .WithMany("UserOfficeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany("UserOfficeRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Referrer", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalOffice.Domain.Device", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Bank", b =>
                {
                    b.Navigation("CashCarts");

                    b.Navigation("CashChecks");

                    b.Navigation("CashPoses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.BasicInfo", b =>
                {
                    b.Navigation("BasicInfoDetails");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Cash", b =>
                {
                    b.Navigation("CashCarts");

                    b.Navigation("CashChecks");

                    b.Navigation("CashMoneies");

                    b.Navigation("CashPoses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DiscountType", b =>
                {
                    b.Navigation("ReceptionDiscounts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Drug", b =>
                {
                    b.Navigation("PDrugs");

                    b.Navigation("SDrugs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugConsumption", b =>
                {
                    b.Navigation("DrugPres");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugSection", b =>
                {
                    b.Navigation("DrugPres");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugShape", b =>
                {
                    b.Navigation("DrugPres");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugUsage", b =>
                {
                    b.Navigation("DrugPres");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FDO", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("DrugPrescriptions");

                    b.Navigation("RoutineMedications");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ICD11", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Diagnoses");

                    b.Navigation("GeneralExaminations");

                    b.Navigation("PMHs");

                    b.Navigation("SocialHistories");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Insurance", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("ReceptionDetails_Insurance");

                    b.Navigation("Services");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplier", b =>
                {
                    b.Navigation("KMultiplierDetails");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Introduceres");

                    b.Navigation("MedicalStaffSchedules");

                    b.Navigation("Patients");

                    b.Navigation("ReceptionMedicalStaffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffServiceSharePercent", b =>
                {
                    b.Navigation("ReceptionMedicalStaffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Membership", b =>
                {
                    b.Navigation("MemberShipServices");

                    b.Navigation("ReceptionDiscounts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPermissions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Office", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BasicInfos");

                    b.Navigation("CashCarts");

                    b.Navigation("CashChecks");

                    b.Navigation("CashMoneies");

                    b.Navigation("CashPoses");

                    b.Navigation("DiscountTypes");

                    b.Navigation("FormCommitments");

                    b.Navigation("FormIllnesses");

                    b.Navigation("FormReferals");

                    b.Navigation("Insurances");

                    b.Navigation("Introducers");

                    b.Navigation("KMultipliers");

                    b.Navigation("MedicalStaffs");

                    b.Navigation("MemberShipServices");

                    b.Navigation("Memberships");

                    b.Navigation("Patients");

                    b.Navigation("Pictures");

                    b.Navigation("ReceptionDetails");

                    b.Navigation("Receptions");

                    b.Navigation("Sections");

                    b.Navigation("ServiceDuration");

                    b.Navigation("Services");

                    b.Navigation("Shifts");

                    b.Navigation("Tariffs");

                    b.Navigation("UserOfficePermissions");

                    b.Navigation("UserOfficeRoles");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("Diagnoses");

                    b.Navigation("DrugAbuses");

                    b.Navigation("DrugPrescriptions");

                    b.Navigation("GeneralExaminations");

                    b.Navigation("Introduceres");

                    b.Navigation("MedicalActions");

                    b.Navigation("PMHs");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientCommitmentForms");

                    b.Navigation("PatientContacts");

                    b.Navigation("PatientFiless");

                    b.Navigation("PatientIllnessForms");

                    b.Navigation("PatientReferralForms");

                    b.Navigation("PatientTags");

                    b.Navigation("PhysicalExams");

                    b.Navigation("Pictures");

                    b.Navigation("Receptions");

                    b.Navigation("RoutineMedications");

                    b.Navigation("SocialHistories");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Permission", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserOfficePermissions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Reception", b =>
                {
                    b.Navigation("Cashs");

                    b.Navigation("ReceptionDebts");

                    b.Navigation("ReceptionDetails");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDetail", b =>
                {
                    b.Navigation("ReceptionDebts");

                    b.Navigation("ReceptionMedicalStaffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserOfficeRoles");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Room", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ServiceRooms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RVU3", b =>
                {
                    b.Navigation("MedicalActions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Section", b =>
                {
                    b.Navigation("MedicalStaffServiceSharePercents");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("MedicalStaffServiceSharePercents");

                    b.Navigation("MemberShipServices");

                    b.Navigation("ReceptionDetails_Service");

                    b.Navigation("ServiceRooms");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Shift", b =>
                {
                    b.Navigation("MedicalStaffServiceSharePercents");

                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SNOMED", b =>
                {
                    b.Navigation("DrugAbuses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.User", b =>
                {
                    b.Navigation("AppointmentsCreatedBy");

                    b.Navigation("AppointmentsLastUpdatedBy");

                    b.Navigation("MedicalStaffs");

                    b.Navigation("UserOfficePermissions");

                    b.Navigation("UserOfficeRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
