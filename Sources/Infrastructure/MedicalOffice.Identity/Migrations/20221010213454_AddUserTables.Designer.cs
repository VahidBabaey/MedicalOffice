// <auto-generated />
using System;
using Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalOffice.Identity.Migrations
{
    [DbContext(typeof(ApplicationIdentityDbContext))]
    [Migration("20221010213454_AddUserTables")]
    partial class AddUserTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Access", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoctorAccessCommitments")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorAccessForms")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorAccessLightPen")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorAccessPatientHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorAccessPictures")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorAccessPrescription")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorChangeOthersVisit")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorVisitDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorVisitEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("DoctorVisitRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("FileAccessPatientNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("FileChangeDateAdvancePayment")
                        .HasColumnType("bit");

                    b.Property<bool>("FileChangeUser")
                        .HasColumnType("bit");

                    b.Property<bool>("FileDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("FileEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("FileExcel")
                        .HasColumnType("bit");

                    b.Property<bool>("FileRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("FileRegistrationAdvancePayment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBasicInfoAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDashboardAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoctorAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFileAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceptionAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReportAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoreAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTimingAccessActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReceptionDateChange")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceptionDebtRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceptionDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceptionEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceptionReturnregistration")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceptionShiftChange")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportDailyCash")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportDebtors")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportDeposit")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportDoctorsPerformancd")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportElectronicPrescription")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportExpense")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportExpertsPerformancd")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportFinancial")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportInstallment")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportInsuranceCopies")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportInsurances")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportIntroducers")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportReturns")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportServicesProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportSpecialForms")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportStaticticalVisits")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportStatuseofPatients")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportStore")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportTimimg")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreComidity")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreComidityTrasportation")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreConsumerRegitration")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreRemittanceDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreRemittanceEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreRemittanceRegitration")
                        .HasColumnType("bit");

                    b.Property<bool>("TimingCancelation")
                        .HasColumnType("bit");

                    b.Property<bool>("TimingDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("TimingRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("TimingRegistrationforSelectedDoctors")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserOfficeRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserOfficeRoleId");

                    b.ToTable("Access");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FDOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FDOId");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.AppointmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentType");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Diagnose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnoseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnose");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DiscountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("DiscountType");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugAbuse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ConsumptionAmount")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SNOMEDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SNOMEDId");

                    b.ToTable("DrugAbuse");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ConsumedNumber")
                        .HasColumnType("real");

                    b.Property<int>("ConsumptionFrequency")
                        .HasColumnType("int");

                    b.Property<int>("ConsumptionWay")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Dose")
                        .HasColumnType("real");

                    b.Property<int>("DrugType")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("FDOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriptionHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FDOId");

                    b.HasIndex("PatientId");

                    b.ToTable("DrugPrescription");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FDO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FDO");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormCommitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("FormCommitment");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.GeneralExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnyPresentSign")
                        .HasColumnType("bit");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeginHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("GeneralExamination");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ICD11", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ICD11");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAdditionalInsurance")
                        .HasColumnType("bit");

                    b.Property<long>("InsuranceCode")
                        .HasColumnType("bigint");

                    b.Property<float>("InsurancePercent")
                        .HasColumnType("real");

                    b.Property<bool>("IsAdditionalInsurance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Joinable")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowonDisket")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("KMultiplier");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplierDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KMultiplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("KValue")
                        .HasColumnType("real");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KMultiplierId");

                    b.ToTable("KMultiplierDetail");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeginHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RVU3Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RVU3Id");

                    b.ToTable("MedicalAction");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorTopic")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("MedicalStaff");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffWorkHourProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EveningEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EveningStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAppointmentCount")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MorningEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MorningStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.ToTable("MedicalStaffWorkHourProgram");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceptionDiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReceptionDiscountId");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcquaintedWay")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationStatus")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FingerPrint")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IntroducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IntroducerType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MarriageDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PatientCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("AddressValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAddress");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientCommitmentForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAD")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientCommitmentForm");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientContact");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFiles");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientIllnessForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAD")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IllnessReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RestPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientIllnessForm");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientPicture");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientReferralForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAD")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferralReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientReferralForm");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientTag");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PhysicalExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BMI")
                        .HasColumnType("real");

                    b.Property<float>("BSA")
                        .HasColumnType("real");

                    b.Property<float>("BloodPressureMax")
                        .HasColumnType("real");

                    b.Property<float>("BloodPressureMin")
                        .HasColumnType("real");

                    b.Property<float>("Breathing")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Diet")
                        .HasColumnType("bit");

                    b.Property<string>("ExamDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FastBloodSugar")
                        .HasColumnType("real");

                    b.Property<float>("Heat")
                        .HasColumnType("real");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PO2")
                        .HasColumnType("real");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Pulse")
                        .HasColumnType("real");

                    b.Property<float>("SPO2")
                        .HasColumnType("real");

                    b.Property<float>("Waist")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PhysicalExam");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PMH", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PMH");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Reception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FactorNo")
                        .HasColumnType("bigint");

                    b.Property<long>("FactorNoToday")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoggedInUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceptionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceptionSubmitHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceptionType")
                        .HasColumnType("int");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalDebt")
                        .HasColumnType("real");

                    b.Property<float>("TotalDeposit")
                        .HasColumnType("real");

                    b.Property<float>("TotalReceived")
                        .HasColumnType("real");

                    b.Property<float>("TotalReceptionCost")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LoggedInUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Reception");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Debt")
                        .HasColumnType("real");

                    b.Property<float>("Deposit")
                        .HasColumnType("real");

                    b.Property<Guid>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ServiceCount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReceptionDetail");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DiscountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReceptionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("ReceptionDetailId");

                    b.ToTable("ReceptionDiscount");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceptionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserServiceSharePercentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionDetailId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserServiceSharePercentId");

                    b.ToTable("ReceptionUser");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RoutineMedication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConsumptionWay")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FDOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FDOId");

                    b.HasIndex("PatientId");

                    b.ToTable("RoutineMedication");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RVU3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RVU3");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenericCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasTariff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsumingMaterials")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPractical")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ServiceType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HolidayShift")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SNOMED", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SNOMED");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SocialHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasLeadToDeath")
                        .HasColumnType("bit");

                    b.Property<Guid>("ICD11Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Relativity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ICD11Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SocialHistory");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AdjunctPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Difference")
                        .HasColumnType("real");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("InsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("InsurancePercent")
                        .HasColumnType("real");

                    b.Property<float>("InternalTariffValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KMultiplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TariffValue")
                        .HasColumnType("real");

                    b.Property<bool>("UseKMultiplier")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("KMultiplierId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Tariff");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserOfficeRole");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeSpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOfficeSpecialization");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserServiceSharePercent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ShareAmount")
                        .HasColumnType("real");

                    b.Property<float>("SharePercent")
                        .HasColumnType("real");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserOfficeRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserOfficeRoleId");

                    b.ToTable("UserServiceSharePercent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Identity.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Access", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Accesses")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.UserOfficeRole", "UserOfficeRole")
                        .WithMany("Accesses")
                        .HasForeignKey("UserOfficeRoleId");

                    b.Navigation("Office");

                    b.Navigation("UserOfficeRole");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Allergy", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.FDO", "FDO")
                        .WithMany("Allergies")
                        .HasForeignKey("FDOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("Allergies")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FDO");

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Insurance");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.AppointmentService", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Diagnose", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("Diagnoses")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DiscountType", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("DiscountTypes")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugAbuse", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("DrugAbuses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.SNOMED", "SNOMED")
                        .WithMany("DrugAbuses")
                        .HasForeignKey("SNOMEDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SNOMED");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DrugPrescription", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.FDO", "FDO")
                        .WithMany("DrugPrescriptions")
                        .HasForeignKey("FDOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("DrugPrescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FDO");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FormCommitment", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("FormCommitments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.GeneralExamination", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("GeneralExaminations")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("GeneralExaminations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Insurance", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Insurances")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplier", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("KMultipliers")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplierDetail", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.KMultiplier", "KMultiplier")
                        .WithMany("KMultiplierDetails")
                        .HasForeignKey("KMultiplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KMultiplier");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalAction", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalActions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.RVU3", "RVU3")
                        .WithMany("MedicalActions")
                        .HasForeignKey("RVU3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RVU3");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaff", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("MedicalOffice.Domain.Entities.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Office");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaffWorkHourProgram", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("MedicalStaffWorkHourPrograms")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Membership", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.ReceptionDiscount", "ReceptionDiscount")
                        .WithMany("Memberships")
                        .HasForeignKey("ReceptionDiscountId");

                    b.Navigation("Office");

                    b.Navigation("ReceptionDiscount");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Patient", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Patients")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientAddress", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientCommitmentForm", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientCommitmentForms")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientContact", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientContacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientFiles", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientFiless")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientIllnessForm", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientIllnessForms")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientPicture", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientPictures")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientReferralForm", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientReferralForms")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PatientTag", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PhysicalExam", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PhysicalExams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.PMH", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("PMHs")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("PMHs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Reception", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany("Receptions")
                        .HasForeignKey("LoggedInUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Receptions")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("Receptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Shift", "Shift")
                        .WithMany("Receptions")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Patient");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDetail", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany("ReceptionDetails_Insurance")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("ReceptionDetails")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Reception", "Reception")
                        .WithMany("ReceptionDetails")
                        .HasForeignKey("ReceptionId");

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("ReceptionDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Office");

                    b.Navigation("Reception");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDiscount", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.DiscountType", "DiscountType")
                        .WithMany("ReceptionDiscounts")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("MedicalOffice.Domain.Entities.ReceptionDetail", "ReceptionDetail")
                        .WithMany("ReceptionDiscounts")
                        .HasForeignKey("ReceptionDetailId");

                    b.Navigation("DiscountType");

                    b.Navigation("ReceptionDetail");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionUser", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ReceptionDetail", "ReceptionDetail")
                        .WithMany("ReceptionUsers")
                        .HasForeignKey("ReceptionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany("ReceptionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.UserServiceSharePercent", "UserServiceSharePercent")
                        .WithMany("ReceptionUsers")
                        .HasForeignKey("UserServiceSharePercentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceptionDetail");

                    b.Navigation("User");

                    b.Navigation("UserServiceSharePercent");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RoutineMedication", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.FDO", "FDO")
                        .WithMany("RoutineMedications")
                        .HasForeignKey("FDOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("RoutineMedications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FDO");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Section", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Sections")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Service", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Membership", "Membership")
                        .WithMany("Services")
                        .HasForeignKey("MembershipId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Services")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Section", "Section")
                        .WithMany("Services")
                        .HasForeignKey("SectionId");

                    b.HasOne("MedicalOffice.Domain.Entities.Specialization", "Specialization")
                        .WithMany("Services")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Membership");

                    b.Navigation("Office");

                    b.Navigation("Section");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Shift", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Shifts")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SocialHistory", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.ICD11", "ICD11")
                        .WithMany("SocialHistories")
                        .HasForeignKey("ICD11Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Patient", "Patient")
                        .WithMany("SocialHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ICD11");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Tariff", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Insurance", "Insurance")
                        .WithMany("Tariffs")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.KMultiplier", "KMultiplier")
                        .WithMany("Tariffs")
                        .HasForeignKey("KMultiplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("Tariffs")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("Tariffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("KMultiplier");

                    b.Navigation("Office");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeRole", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany()
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany("UserOfficeRoles")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MedicalOffice.Domain.Entities.Role", "Role")
                        .WithMany("UserOfficeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MedicalStaff");

                    b.Navigation("Office");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeSpecialization", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Specialization", "Specialization")
                        .WithMany("UserOfficeSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserServiceSharePercent", b =>
                {
                    b.HasOne("MedicalOffice.Domain.Entities.Section", "Section")
                        .WithMany("UserServiceSharePercents")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Service", "Service")
                        .WithMany("UserServiceSharePercents")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.Shift", "Shift")
                        .WithMany("UserServiceSharePercents")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Domain.Entities.UserOfficeRole", "UserOfficeRole")
                        .WithMany("UserServiceSharePercents")
                        .HasForeignKey("UserOfficeRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Service");

                    b.Navigation("Shift");

                    b.Navigation("UserOfficeRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.DiscountType", b =>
                {
                    b.Navigation("ReceptionDiscounts");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.FDO", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("DrugPrescriptions");

                    b.Navigation("RoutineMedications");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ICD11", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Diagnoses");

                    b.Navigation("GeneralExaminations");

                    b.Navigation("PMHs");

                    b.Navigation("SocialHistories");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Insurance", b =>
                {
                    b.Navigation("ReceptionDetails_Insurance");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.KMultiplier", b =>
                {
                    b.Navigation("KMultiplierDetails");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.MedicalStaff", b =>
                {
                    b.Navigation("MedicalStaffWorkHourPrograms");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Membership", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Office", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("DiscountTypes");

                    b.Navigation("Insurances");

                    b.Navigation("KMultipliers");

                    b.Navigation("Patients");

                    b.Navigation("ReceptionDetails");

                    b.Navigation("Receptions");

                    b.Navigation("Sections");

                    b.Navigation("Services");

                    b.Navigation("Shifts");

                    b.Navigation("Tariffs");

                    b.Navigation("UserOfficeRoles");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("Diagnoses");

                    b.Navigation("DrugAbuses");

                    b.Navigation("DrugPrescriptions");

                    b.Navigation("FormCommitments");

                    b.Navigation("GeneralExaminations");

                    b.Navigation("MedicalActions");

                    b.Navigation("PMHs");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientCommitmentForms");

                    b.Navigation("PatientContacts");

                    b.Navigation("PatientFiless");

                    b.Navigation("PatientIllnessForms");

                    b.Navigation("PatientPictures");

                    b.Navigation("PatientReferralForms");

                    b.Navigation("PatientTags");

                    b.Navigation("PhysicalExams");

                    b.Navigation("Receptions");

                    b.Navigation("RoutineMedications");

                    b.Navigation("SocialHistories");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Reception", b =>
                {
                    b.Navigation("ReceptionDetails");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDetail", b =>
                {
                    b.Navigation("ReceptionDiscounts");

                    b.Navigation("ReceptionUsers");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.ReceptionDiscount", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserOfficeRoles");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.RVU3", b =>
                {
                    b.Navigation("MedicalActions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Section", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("UserServiceSharePercents");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("ReceptionDetails");

                    b.Navigation("Tariffs");

                    b.Navigation("UserServiceSharePercents");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Shift", b =>
                {
                    b.Navigation("Receptions");

                    b.Navigation("UserServiceSharePercents");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.SNOMED", b =>
                {
                    b.Navigation("DrugAbuses");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.Specialization", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Services");

                    b.Navigation("UserOfficeSpecializations");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ReceptionUsers");

                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserOfficeRole", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("UserServiceSharePercents");
                });

            modelBuilder.Entity("MedicalOffice.Domain.Entities.UserServiceSharePercent", b =>
                {
                    b.Navigation("ReceptionUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
